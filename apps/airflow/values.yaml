airflow:
  airflow:
    image:
      repository: apache/airflow
      tag: "2.9.3" # or latest stable 2.9.x
    executor: "KubernetesExecutor"
    config:
      AIRFLOW__WEBSERVER__BASE_URL: "https://airflow.bergtobias.com"
      AIRFLOW__WEBSERVER__ENABLE_PROXY_FIX: "True"
      AIRFLOW__KUBERNETES__NAMESPACE: "airflow"
      AIRFLOW__KUBERNETES__DELETE_WORKER_PODS: "True"
      AIRFLOW__KUBERNETES__DELETE_WORKER_PODS_ON_FAILURE: "True"
      AIRFLOW__KUBERNETES__DAGS_IN_IMAGE: "False" # since you use gitSync

    extraEnv:
      - name: GITHUB_CLIENT_ID
        valueFrom:
          secretKeyRef:
            name: github-airflow-oauth
            key: client-id
      - name: GITHUB_CLIENT_SECRET
        valueFrom:
          secretKeyRef:
            name: github-airflow-oauth
            key: client-secret

  dags:
    gitSync:
      enabled: true
      repo: https://github.com/vercevo/dags
      branch: main
      rev: HEAD
      depth: 1
      subPath: ""
      wait: 60

  web:
    replicas: 1
    webserverConfig:
      enabled: true
      stringOverride: |-
        import os
        import logging
        from airflow.providers.fab.auth_manager.security_manager.override import FabAirflowSecurityManagerOverride
        from typing import Any, Union

        log = logging.getLogger(__name__)
        log.setLevel(os.getenv("AIRFLOW__LOGGING__FAB_LOGGING_LEVEL", "INFO"))

        FAB_ADMIN_ROLE = "Admin"
        FAB_VIEWER_ROLE = "Viewer"
        FAB_PUBLIC_ROLE = "Public"  # fallback role

        TEAM_ID_A_FROM_GITHUB = 123  # Replace with real team IDs
        TEAM_ID_B_FROM_GITHUB = 456


        def team_parser(team_payload: list[dict[str, Any]]) -> list[int]:
            return [team["id"] for team in team_payload]


        def map_roles(team_list: list[int]) -> list[str]:
            team_role_map = {
                TEAM_ID_A_FROM_GITHUB: FAB_ADMIN_ROLE,
                TEAM_ID_B_FROM_GITHUB: FAB_VIEWER_ROLE,
            }
            return list({team_role_map.get(team, FAB_PUBLIC_ROLE) for team in team_list})


        class GithubTeamAuthorizer(FabAirflowSecurityManagerOverride):
            def get_oauth_user_info(self, provider: str, resp: Any) -> dict[str, Union[str, list[str]]]:
                remote_app = self.appbuilder.sm.oauth_remotes[provider]
                me = remote_app.get("user")
                user_data = me.json()
                team_data = remote_app.get("user/teams")
                teams = team_parser(team_data.json())
                roles = map_roles(teams)

                log.debug(f"User info from GitHub: {user_data}\nTeam info from GitHub: {teams}")
                return {
                    "username": "github_" + user_data.get("login"),
                    "role_keys": roles,
                }


        OAUTH_PROVIDERS = [
            {
                "name": "github",
                "icon": "fa-github",
                "token_key": "access_token",
                "remote_app": {
                    "client_id": os.environ.get("GITHUB_CLIENT_ID"),
                    "client_secret": os.environ.get("GITHUB_CLIENT_SECRET"),
                    "api_base_url": "https://api.github.com/",
                    "request_token_url": None,
                    "access_token_url": "https://github.com/login/oauth/access_token",
                    "authorize_url": "https://github.com/login/oauth/authorize",
                    "client_kwargs": {"scope": "read:org"},
                },
            }
        ]

        AUTH_ROLE_ADMIN = FAB_ADMIN_ROLE
        AUTH_ROLE_PUBLIC = FAB_PUBLIC_ROLE

  redis:
    ## if the `stable/redis` chart is used
    enabled: false
  flower:
    ## if the airflow flower UI should be deployed
    enabled: false
  workers:
    ## if the airflow workers StatefulSet should be deployed
    enabled: false
