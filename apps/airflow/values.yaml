airflow:
  airflow:
    executor: "KubernetesExecutor"
    config:
      AIRFLOW__WEBSERVER__BASE_URL: "https://airflow.bergtobias.com"
      AIRFLOW__WEBSERVER__ENABLE_PROXY_FIX: "True"
      AIRFLOW__KUBERNETES__NAMESPACE: "airflow"
      AIRFLOW__KUBERNETES__DELETE_WORKER_PODS: "True"
      AIRFLOW__KUBERNETES__DELETE_WORKER_PODS_ON_FAILURE: "True"
      AIRFLOW__KUBERNETES__DAGS_IN_IMAGE: "False" # since you use gitSync

    extraEnv:
      - name: GITHUB_CLIENT_ID
        valueFrom:
          secretKeyRef:
            name: github-airflow-oauth
            key: client-id
      - name: GITHUB_CLIENT_SECRET
        valueFrom:
          secretKeyRef:
            name: github-airflow-oauth
            key: client-secret

  dags:
    gitSync:
      enabled: true
      repo: https://github.com/vercevo/dags
      branch: main
      rev: HEAD
      depth: 1
      subPath: ""
      wait: 60

  web:
    replicas: 1
    webserverConfig:
      enabled: true
      stringOverride: |-
        import os
        import logging
        import requests
        from flask_appbuilder.security.manager import AUTH_OAUTH

        log = logging.getLogger(__name__)
        log.setLevel(os.getenv("AIRFLOW__LOGGING__FAB_LOGGING_LEVEL", "INFO"))

        AUTH_TYPE = AUTH_OAUTH
        AUTH_USER_REGISTRATION = True
        AUTH_USER_REGISTRATION_ROLE = "Viewer"   # fallback if no mapping
        AUTH_ROLES_SYNC_AT_LOGIN = True

        # Map GitHub org:team â†’ Airflow roles
        AUTH_ROLES_MAPPING = {
            "vercevo:eggmans": ["Admin"],
        }

        def github_user_info(resp):
            """Custom GitHub user info fetcher with debug logging"""
            token = resp.json().get("access_token")
            if not token:
                raise Exception("No GitHub access token in OAuth response")

            headers = {"Authorization": f"token {token}"}
            me = requests.get("https://api.github.com/user", headers=headers).json()
            teams = requests.get("https://api.github.com/user/teams", headers=headers).json()

            log.info("=== GITHUB LOGIN DEBUG ===")
            log.info(f"Access token: {token[:6]}... (redacted)")
            log.info(f"User: {me}")
            log.info(f"Teams: {teams}")
            log.info("==========================")

            return {
                "username": me.get("login"),
                "email": me.get("email") or f"{me.get('login')}@email.notfound",
                "first_name": me.get("name") or me.get("login"),
                "last_name": "",
            }

        OAUTH_PROVIDERS = [
            {
                "name": "github",
                "icon": "fa-github",
                "token_key": "access_token",
                "remote_app": {
                    "client_id": os.getenv("GITHUB_CLIENT_ID"),
                    "client_secret": os.getenv("GITHUB_CLIENT_SECRET"),
                    "api_base_url": "https://api.github.com/",
                    "client_kwargs": {"scope": "read:user,user:email,read:org"},
                    "access_token_url": "https://github.com/login/oauth/access_token",
                    "authorize_url": "https://github.com/login/oauth/authorize",
                    "request_token_url": None,
                },
                "user_info": github_user_info,
            }
        ]t

  redis:
    ## if the `stable/redis` chart is used
    enabled: false
  flower:
    ## if the airflow flower UI should be deployed
    enabled: false
  workers:
    ## if the airflow workers StatefulSet should be deployed
    enabled: false
