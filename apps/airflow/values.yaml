airflow:
  airflow:
    image:
      repository: apache/airflow
      tag: "2.9.3" # or latest stable 2.9.x
    executor: "KubernetesExecutor"
    config:
      AIRFLOW__WEBSERVER__BASE_URL: "https://airflow.bergtobias.com"
      AIRFLOW__WEBSERVER__ENABLE_PROXY_FIX: "True"
      AIRFLOW__KUBERNETES__NAMESPACE: "airflow"
      AIRFLOW__KUBERNETES__DELETE_WORKER_PODS: "True"
      AIRFLOW__KUBERNETES__DELETE_WORKER_PODS_ON_FAILURE: "True"
      AIRFLOW__KUBERNETES__DAGS_IN_IMAGE: "False" # since you use gitSync

    extraEnv:
      - name: GITHUB_CLIENT_ID
        valueFrom:
          secretKeyRef:
            name: github-airflow-oauth
            key: client-id
      - name: GITHUB_CLIENT_SECRET
        valueFrom:
          secretKeyRef:
            name: github-airflow-oauth
            key: client-secret

  dags:
    gitSync:
      enabled: true
      repo: https://github.com/vercevo/dags
      branch: main
      rev: HEAD
      depth: 1
      subPath: ""
      wait: 60

  web:
    replicas: 1
    webserverConfig:
      enabled: true
      stringOverride: |-
        from airflow.providers.fab.auth_manager.security_manager.override import FabAirflowSecurityManagerOverride
        import logging
        from typing import Any, Dict, List, Union

        log = logging.getLogger(__name__)

        FAB_ADMIN_ROLE = "Admin"
        FAB_VIEWER_ROLE = "Viewer"
        FAB_PUBLIC_ROLE = "Public"  # Default with no permissions

        # Replace these IDs with your actual GitHub team IDs
        TEAM_ID_ADMIN = "vercevo/eggmans"     # e.g. vercevo/eggmans
        TEAM_ID_VIEWER = "eggmans"    # another team


        def team_parser(team_payload: List[Dict[str, Any]]) -> List[int]:
            """Extract team IDs from the GitHub API response."""
            return [team["id"] for team in team_payload]


        def map_roles(team_list: List[int]) -> List[str]:
            """Map GitHub team IDs to Airflow roles."""
            team_role_map = {
                TEAM_ID_ADMIN: FAB_ADMIN_ROLE,
                TEAM_ID_VIEWER: FAB_VIEWER_ROLE,
            }
            return list(set(team_role_map.get(team, FAB_PUBLIC_ROLE) for team in team_list))


        class GithubTeamAuthorizer(FabAirflowSecurityManagerOverride):
            def get_oauth_user_info(self, provider: str, resp: Any) -> Dict[str, Union[str, List[str]]]:
                if provider != "github":
                    return super().get_oauth_user_info(provider, resp)

                remote_app = self.appbuilder.sm.oauth_remotes[provider]

                # Query GitHub APIs
                me_resp = remote_app.get("user")
                user_data = me_resp.json()
                teams_resp = remote_app.get("user/teams")
                team_data = teams_resp.json()

                # Parse + map to roles
                team_ids = team_parser(team_data)
                roles = map_roles(team_ids)

                log.info("=== DEBUG: GitHub user info ===")
                log.info("User: %s", user_data)
                log.info("Teams: %s", team_data)
                log.info("Mapped roles: %s", roles)
                log.info("===============================")

                return {
                    "username": "github_" + user_data.get("login"),
                    "email": user_data.get("email") or f"{user_data.get('login')}@email.notfound",
                    "first_name": user_data.get("name") or user_data.get("login"),
                    "last_name": "",
                    "role_keys": roles,
                }

  redis:
    ## if the `stable/redis` chart is used
    enabled: false
  flower:
    ## if the airflow flower UI should be deployed
    enabled: false
  workers:
    ## if the airflow workers StatefulSet should be deployed
    enabled: false
