apiVersion: v1
kind: ConfigMap
metadata:
  name: airflow-webserver
  namespace: airflow
data:
  webserver_config.py: |
    from flask_appbuilder.security.manager import AUTH_OAUTH
    from airflow.providers.fab.auth_manager.security_manager.override import FabAirflowSecurityManagerOverride
    import os
    import logging

    log = logging.getLogger(__name__)

    AUTH_TYPE = AUTH_OAUTH
    AUTH_USER_REGISTRATION = True
    AUTH_ROLES_SYNC_AT_LOGIN = True

    # Map the role keys we return to actual FAB roles
    AUTH_ROLES_MAPPING = {
        "Admin": ["Admin"],
        "Viewer": ["Viewer"],
        "Public": ["Public"],
    }

    OAUTH_PROVIDERS = [
        {
            "name": "github",
            "icon": "fa-github",
            "token_key": "access_token",
            "remote_app": {
                "client_id": os.environ.get("GITHUB_CLIENT_ID"),
                "client_secret": os.environ.get("GITHUB_CLIENT_SECRET"),
                "api_base_url": "https://api.github.com",
                "client_kwargs": {"scope": "read:user, read:org"},
                "access_token_url": "https://github.com/login/oauth/access_token",
                "authorize_url": "https://github.com/login/oauth/authorize",
                "request_token_url": None,
            },
        }
    ]

    class GithubTeamAuthorizer(FabAirflowSecurityManagerOverride):
        def get_oauth_user_info(self, provider, resp):
            if provider != "github":
                return {}

            remote = self.appbuilder.sm.oauth_remotes[provider]

            # Basic user info
            me = remote.get("user").json()

            # Team membership (requires read:org scope)
            teams_resp = remote.get("user/teams")
            teams = teams_resp.json() if teams_resp.ok else []

            # Admin if member of org 'vercevo' AND team 'eggmans'
            is_admin = any(
                (t.get("organization", {}) or {}).get("login", "").lower() == "vercevo"
                and t.get("slug", "").lower() == "eggmans"
                for t in teams
            )

            roles = ["Admin"] if is_admin else ["Viewer"]

            return {
                "username": "github_" + (me.get("login") or ""),
                "email": me.get("email"),
                "first_name": (me.get("name") or me.get("login") or ""),
                "last_name": "",
                "role_keys": roles,
            }

    SECURITY_MANAGER_CLASS = GithubTeamAuthorizer
